package org.firstinspires.ftc.teamcode;

import java.util.List;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.xguzm.pathfinding.finders.AStarFinder;
import org.xguzm.pathfinding.grid.GridCell;
import org.xguzm.pathfinding.grid.NavigationGrid;
import org.xguzm.pathfinding.grid.finders.GridFinderOptions;
import org.xguzm.pathfinding.grid.heuristics.ManhattanDistance;


public class AStarFinderTest {
	public static void testMovementPath() {
   		NavigationGrid<GridCell> grid;
		AStarFinder<GridCell> finder;
		GridFinderOptions opt;
    		grid = NavGraphFactory.getGridCellMap();	
		opt = new GridFinderOptions();
		finder = new AStarFinder<GridCell>(GridCell.class, opt);


		System.out.println("\nRunning AStarFinderTest.testMovementPath");
		GridCell start = grid.getCell(2, 0), end = grid.getCell(4, 7);
		
		//test orthogonal movement only
		opt.allowDiagonal = false;
		
		List<GridCell> path = finder.findPath(start,  end,  grid);
		assertNotNull(String.format("No path found from %s to %s for orthogonal movement", start, end), path);
		
		ManhattanDistance heuristic = new ManhattanDistance();
		
		for(int i = 1; i < path.size(); i++){
			GridCell current = path.get(i);
			GridCell prev = path.get(i-1);
			
			System.out.println("    Path1: (" + (i) + ") " + current);
			float dst = heuristic.calculate(current, prev);
			//weather you use forward or strafe depends on start oreintation.
			//deviding by 5 is done because the astarSetup script I created is based on a
     			//720X720 grid
			if(path.get(i).getY()==path.get(i-1).getY()){
				if(path.get(i).getX>path.getY(i-1).getX()){
					Robot.rightStrafe(1,.1,dist/5);
				}else{
					Robot.leftStrafe(1,.1,dist/5);

				}
			}else{
				if(path.get(i).getX>path.getX(i-1).getX()){
					Robot.backward(1,.1,dist/5);
				}else{
					Robot.forward(1,.1,dist/5);
				}
			}
					
		}
		
		
	}
}

